#!/bin/bash

# This script is the AppRun entry point used by an AppImage to set up the necessary environment
# and directory path for the application. It first ensures that the APPDIR variable is defined,
# representing the root of the AppImage filesystem. After setting up the environment, it delegates
# control to the `startapp.py` script, which is responsible for initiating the main Python
# application. This setup allows for a layered initialization process, ensuring that the
# application is launched with the correct context and dependencies within the AppImage's sandbox.
#
# AppRun Script Overview:
# -----------------------
#
# The AppRun script performs the following actions:
#
# 1. Sets the APPDIR environment variable if not already set, which specifies the AppImage's mount
#    point directory.
# 2. Exports additional environment variables required by the Python application.
# 3. Executes the Python interpreter bundled within the AppImage, passing along any arguments to
#    the startapp.py script, which in turn utilizes this module to launch the application.


# Check if APPDIR is already set, if not, determine and set it to the AppImage's mount directory.
# APPDIR needs to be set as it specifies the directory where the AppImage content is located.

if [ -z $APPDIR ]; then
    export APPDIR=$(dirname $(readlink -f "$0"))
fi

export PYTHONNOUSERSITE=1

if [ -n "$VIRTUAL_ENV" ]; then
    RESOLVED_PYTHON3=$(readlink -f "$VIRTUAL_ENV/bin/python3")
    if [ "$RESOLVED_PYTHON3" = "$APPIMAGE" ]; then
        unset PYTHONNOUSERSITE
        export PYTHONUSERBASE="$VIRTUAL_ENV"
        export PATH=$VIRTUAL_ENV/bin:$PATH
        ENV_LOADED=1
    fi
fi


# If the command includes a '/', it's either a relative path or an absolute path.
# Otherwise, the command must be searched for in $PATH.
# a bash subshell for which is only started when no path part is found
CMD_PATH=${ARGV0} && [[ "$ARGV0" != */* ]] && CMD_PATH=$(which "$ARGV0")

if [ -z $ENV_LOADED ] && [ -L $CMD_PATH ]; then

    SYMLINK_PATH=$(realpath -s "$CMD_PATH")
    while [ -L $SYMLINK_PATH ]; do
        VENV_DIR=${SYMLINK_PATH%/*/*}
        # Check if both pyvenv.cfg and activate exist in this potential VENV_DIR
        if [ -f "$VENV_DIR/pyvenv.cfg" ] && [ -f "$VENV_DIR/bin/activate" ] && [ -L "$VENV_DIR/bin/python3" ]; then
            # Check if python3 points to the APPIMAGE
            if [ "$(readlink $VENV_DIR/bin/python3)" = "$APPIMAGE" ]; then
                # Virtual environment found, source activate script
                source "$VENV_DIR/bin/activate"
                unset PYTHONNOUSERSITE
                export PYTHONUSERBASE="$VENV_DIR"
                export PATH="$VENV_DIR/bin:$PATH"
                break  # Exit the loop since the virtual environment is found and activated
            fi
        fi

        # Resolve one level of symlink without following further symlinks
        RESOLVED_LINK=$(readlink "$SYMLINK_PATH")
        # Update SYMLINK_PATH to point to the resolved link for next iteration
        SYMLINK_PATH=$(realpath -s "$RESOLVED_LINK")
    done
fi


# The script then delegates control to `startapp.py` by using the Python interpreter included within the AppImage.
# `startapp.py` is responsible for further initializing and starting the actual Python application.
# $@ passes all given arguments through to `startapp.py`.
exec $APPDIR/python/bin/python3 -P $APPDIR/startapp.py "$@"
